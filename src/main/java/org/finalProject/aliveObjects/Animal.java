package org.finalProject.aliveObjects;

import lombok.Getter;
import org.finalProject.Island;
import org.finalProject.LiveGame;
import org.finalProject.aliveObjects.herbivores.Herbivore;
import org.finalProject.aliveObjects.plants.Plant;
import org.finalProject.managers.UtilClass;
import org.finalProject.managers.Zookeeper;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;

@Getter
public abstract class Animal extends Entity implements AnimalObjects {
    protected int maxSpeed;
    protected double foodWeight;
    protected double satiety;
    private static final AtomicInteger moveCount = new AtomicInteger(0);
    private static final AtomicInteger eatCount = new AtomicInteger(0);

    public static int getMoveCount() {
        return moveCount.get();
    }

    public static int getEatCount() {
        return eatCount.get();
    }

    private final ThreadLocalRandom random = ThreadLocalRandom.current();

    /**
     * –£—Ä–æ–≤–µ–Ω—å —Å—ã—Ç–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—Ç–æ:
     * –ñ–∏–≤–æ—Ç–Ω–æ–µ —É–º—Ä–µ—Ç;
     * –°–º–æ–∂–µ—Ç —Ä–æ–¥–∏—Ç—å;
     * –°–º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
     *
     * @return —É—Ä–æ–≤–µ–Ω—å —Å—ã—Ç–æ—Å—Ç–∏
     */
    private int satietyLevel() {
        if (satiety > 1.5 * foodWeight) {
            return 2;
        } else if (satiety > foodWeight) {
            return 1;
        } else if (satiety < 0) {
            System.out.println("üçΩÔ∏è   " + this + " –∏–∑ –æ—Å—Ç—Ä–æ–≤–∞ " + island.getId() + " —É–º–∏—Ä–∞–µ—Ç —Å –≥–æ–ª–æ–¥–∞");
            Zookeeper.killEntities(this);
            return 0;
        } else {
            return 0;
        }
    }

    /**
     * –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—é. –í –∏–¥–µ–∞–ª–µ 3-5
     */
    @Override
    public boolean canReproduce() {
        return fertility++ >= UtilClass.getAnimalFertility() && satietyLevel() == 2;
    }

    /**
     * –ñ–∏–≤–æ—Ç–Ω—ã–µ —Ä–∞–∑–º–Ω–æ–∂–∞—é—Ç—Å—è –ø–æ–ø–∞—Ä–Ω–æ
     */
    @Override
    public AliveObjects reproduction() {
        if (age++ > 20) {
            System.out.println("‚è≥   " + this + " –∏–∑ –æ—Å—Ç—Ä–æ–≤–∞ " + island.getId() + " —É–º–∏—Ä–∞–µ—Ç –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏");
            Zookeeper.killEntities(this);  // –ñ–∏–≤–æ—Ç–Ω–æ–µ —É–º–∏—Ä–∞–µ—Ç –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏
            return null;
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –æ–±—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º
        synchronized (island.lock) {
            if (island.isReproductionPossible(this.getClass()) && canReproduce()) {
                try {
                    // –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è
                    Optional<Animal> partner = island.getAliveObjectsList()
                            .stream()
                            .filter(obj -> getClass().isInstance(obj) && obj != this)  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è
                            .map(obj -> (Animal) obj)
                            .filter(obj -> obj.satietyLevel() == 2 && obj.canReproduce())  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—ã—Ç–æ—Å—Ç–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—é
                            .findFirst();

                    // –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω
                    if (partner.isPresent()) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                        this.fertility = 0;
                        this.satiety = foodWeight * 0.5;
                        partner.get().fertility = 0;
                        partner.get().satiety = foodWeight * 0.5;

                        // –ü–µ—á–∞—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏
                        Entity.increment();
                        System.out.println("üë∂   " + this + " –∏–∑ –æ—Å—Ç—Ä–æ–≤–∞ " + island.getId() + " —Ä–æ–¥–∏–ª–∞");

                        // –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                        return (AliveObjects) this.clone();
                    }
                } catch (CloneNotSupportedException e) {
                    throw new RuntimeException(e);
                }
            }
        }

        return null;  // –ï—Å–ª–∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    }

    @Override
    public void eat() {
        synchronized (island.lock) {
            //–¢–µ –∫–æ–≥–æ –º–æ–∂–Ω–æ —Å—ä–µ—Å—Ç—å
            List<AnimalObjects> victims = island.getAliveObjectsList()
                    .stream()
                    .filter(obj -> obj instanceof AnimalObjects animal && animal != this && UtilClass.hunting(this, animal) != 0)
                    .map(obj -> (AnimalObjects) obj)
                    .toList();

            //–ù–µ—Ç –Ω–∏–∫–æ–≥–æ, –∫–æ–≥–æ –º–æ–∂–Ω–æ —Å—ä–µ—Å—Ç—å –∏ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ
            if (victims.isEmpty() && this instanceof Herbivore) {
                island.getAliveObjectsList()
                        .stream()
                        .filter(obj -> obj instanceof Plant)
                        .map(obj -> (Plant) obj)
                        .findFirst()
                        .ifPresent(plant -> {
                            satiety = Math.min(satiety + plant.weight, foodWeight * 2);
                            eatCount.incrementAndGet();

                            System.out.println("üíÄ   " + this + " –∏–∑ –æ—Å—Ç—Ä–æ–≤–∞ " + island.getId() + " —Å—ä–µ–ª " + plant);
                            Zookeeper.killEntities(plant);
                        });

                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –º–µ—Ç–æ–¥, –µ—Å–ª–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–µ —Å—ä–µ–ª–æ –∏–ª–∏ –Ω–µ —Å—ä–µ–ª–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ
            }

            //–û—Ö–æ—Ç–∞ —Ö–∏—â–Ω–∏–∫–æ–≤
            for (AnimalObjects victim : victims) { // –£–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã —Ç–µ, —É –∫–æ–≥–æ —à–∞–Ω—Å > 0
                int hunting = UtilClass.hunting(this, victim);
                if (random.nextInt(100) < hunting) {
                    satiety = Math.min(satiety + ((Entity) victim).getWeight(), foodWeight * 2);
                    eatCount.incrementAndGet();

                    System.out.println("üíÄ   " + this + " –∏–∑ –æ—Å—Ç—Ä–æ–≤–∞ " + island.getId() + " —Å—ä–µ–ª " + victim);
                    Zookeeper.killEntities((AliveObjects) victim);
                    break; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ö–æ—Ç—É –ø–æ—Å–ª–µ –ø–æ–µ–¥–∞–Ω–∏—è
                }
            }
        }
    }

    @Override
    public void move() {
        if ((LiveGame.WIDTH == 1 && LiveGame.HEIGHT == 1)) {
            return;
        }

        int oldId = island.getId();
        int newId = getNewId(oldId);

        Island newIsland = LiveGame.getIslandById(newId);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫ synchronized –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Å—Ç—Ä–æ–≤–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö ID, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å deadlock
        Island firstLock = oldId < newId ? island : newIsland;
        Island secondLock = oldId < newId ? newIsland : island;

        synchronized (firstLock.lock) {
            synchronized (secondLock.lock) {
                island.leaveTheIsland(this);
                newIsland.enterTheIsland(this);
                setIsland(newIsland);

                moveCount.incrementAndGet();
                System.out.println("üèÉ‚Äç‚ôÇÔ∏è   " + this + " –∏–∑ –æ—Å—Ç—Ä–æ–≤–∞ " + oldId + " –ø–µ—Ä–µ–µ—Ö–∞–ª –≤ " + newId);
            }
        }

        //–î–≤–∏–∂–µ–Ω–∏–µ –æ—Ç–Ω–∏–º–∞–µ—Ç —Å—ã—Ç–æ—Å—Ç—å
        satiety -= foodWeight * 0.1;
        satietyLevel();
    }

    /**
     * –ù–æ–≤—ã–π –æ—Å—Ç—Ä–æ–≤ –∫—É–¥–∞ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø—Ä–∏–¥–µ—Ç
     *
     * @param oldId ID —Å—Ç–∞—Ä–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞
     * @return ID –Ω–æ–≤–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞
     */
    private int getNewId(int oldId) {
        int width = LiveGame.WIDTH;
        int height = LiveGame.HEIGHT;
        int i = oldId / width;
        int j = oldId % width;

        List<Direction> directions = new ArrayList<>(Arrays.asList(Direction.values()));

        //–ü–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
        while (!directions.isEmpty()) {
            int randomInt = random.nextInt(directions.size());
            Direction direction = directions.remove(randomInt); // –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

            int newId = switch (direction) {
                case UP -> width * (i - 1) + j;
                case DOWN -> width * (i + 1) + j;
                case LEFT -> width * i + (j - 1);
                case RIGHT -> width * i + (j + 1);
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–µ–≥–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (newId >= 0 && newId < width * height) {
                return newId;
            }
        }

        //TODO: –í–æ–∑–º–æ–∂–Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Å—Ç–∞–Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ –æ—Å—Ç—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ –º–µ—Ç–æ–¥ –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω
        return oldId; // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ
    }
}
