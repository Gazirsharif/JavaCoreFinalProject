package org.finalProject.aliveObjects;

import lombok.Getter;
import org.finalProject.Island;
import org.finalProject.managers.UtilClass;
import org.finalProject.managers.Zookeeper;

import java.util.UUID;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * –°—É—â–Ω–æ—Å—Ç–∏. –ß–µ—Å—Ç–Ω–æ —Å–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π
 */
@Getter
public abstract class Entity implements AliveObjects {
    protected double weight;
    protected Island island;
    protected boolean isDead;
    protected int age = 0;
    protected final String id = UUID.randomUUID().toString();
    protected int fertility = 5;
    public final Lock entityLock = new ReentrantLock();
    private static final AtomicInteger babiesCount = new AtomicInteger();

    public static int getBabiesCount(){
        return babiesCount.get();
    }

    public static void increment(){
        babiesCount.incrementAndGet();
    }

    @Override
    public boolean canReproduce() {
        return fertility++ >= UtilClass.getEntityFertility();
    }

    @Override
    public void setIsland(Island island) {
        this.island = island;
    }

    /**
     * –†–∞—Å—Ç–µ–Ω–∏—è —Ä–∞–∑–º–Ω–æ–∂–∞—é—Ç—Å—è –±–µ–∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∂–∏–≤–æ—Ç–Ω—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –º–µ—Ç–æ–¥.
     * @return –ö–ª–æ–Ω –æ–±—ä–µ–∫—Ç–∞
     */
    @Override
    public AliveObjects reproduction() {
        if (age++ > 20) {
            System.out.println("‚è≥   " + this + " –∏–∑ –æ—Å—Ç—Ä–æ–≤–∞ " + island.getId() + " —É–º–∏—Ä–∞–µ—Ç –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏");
            Zookeeper.killEntities(this);
            return null;
        }

        synchronized (island.lock) {
            if (island.isReproductionPossible(this.getClass()) && canReproduce()) {
                try {
                    AliveObjects baby = (AliveObjects) clone();
                    island.enterTheIsland(baby);
                    fertility = 0;
                    babiesCount.incrementAndGet();

                    System.out.println("üë∂   " + this + " –∏–∑ –æ—Å—Ç—Ä–æ–≤–∞ " + island.getId() + " —Ä–æ–¥–∏–ª–∞");
                    return baby;
                } catch (CloneNotSupportedException e) {
                    throw new RuntimeException("–°—Ç–∞–ª –±–µ—Å–ø–ª–æ–¥–Ω—ã–º");
                }
            }

            return null;
        }
    }

    /**
     * –£–º–∏—Ä–∞—è –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–∫–∏–¥–∞–µ—Ç –æ—Å—Ç—Ä–æ–≤
     */
    @Override
    public void die() {
        synchronized (island.lock) {
            System.out.println("‚ö∞Ô∏è   " + this + " –∏–∑ –æ—Å—Ç—Ä–æ–≤–∞ " + island.getId() + " —É–º–µ—Ä");

            island.leaveTheIsland(this);
            isDead = true;
        }
    }
}
