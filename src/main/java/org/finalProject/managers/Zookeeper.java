package org.finalProject.managers;

import org.finalProject.Island;
import org.finalProject.LiveGame;
import org.finalProject.aliveObjects.AliveObjects;
import org.finalProject.aliveObjects.AnimalObjects;
import org.finalProject.aliveObjects.Entity;
import org.finalProject.aliveObjects.herbivores.*;
import org.finalProject.aliveObjects.plants.Plant;
import org.finalProject.aliveObjects.predators.*;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –≤ —Ä–∞–º–∫–∞—Ö –≤—Å–µ—Ö –æ—Å—Ç–æ–≤–æ–≤.
 * –°–æ–∑–¥–∞–µ—Ç, —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ–º, –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö. –†–∞–±–æ—Ç–∞ —Å –ø–æ—Ç–æ–∫–∞–º–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ.
 * –ü—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è—Ö, —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–∏ –∏ –ø–∏—Ç–∞–Ω–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É –æ—Å—Ç—Ä–æ–≤–∞–º.
 */
public class Zookeeper implements Runnable {
    private static final List<AliveObjects> aliveObjectsList = Collections.synchronizedList(new ArrayList<>());
    private static final List<AliveObjects> deadEntitiesList = Collections.synchronizedList(new ArrayList<>());

    private static final ExecutorService threadPool = Executors.newFixedThreadPool(10);
    private static final Thread mainThread = Thread.currentThread();  // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    private static final Random random = new Random();

    public static List<AliveObjects> getAliveObjectsList(){
        return aliveObjectsList;
    }

    public static List<AliveObjects> getDeadEntitiesList(){
        return deadEntitiesList;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ
     */
    private static void createAlive(Class<? extends AliveObjects> aliveClass) {
        try {
            AliveObjects newAlive = aliveClass.getDeclaredConstructor().newInstance();
            aliveObjectsList.add(newAlive);

            int id = random.nextInt(0, LiveGame.WIDTH * LiveGame.HEIGHT);
//            id = 10;
            Island islandById = LiveGame.getIslandById(id);
            islandById.enterTheIsland(newAlive);
        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException |
                 InvocationTargetException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –æ—Å—Ç—Ä–æ–≤–∞. –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É createAlive
     *
     * @param count –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö
     */
    public static void createRandomEntity(int count) {
        for (int i = 0; i < count; i++) {

            String entity = UtilClass.allEntity.get(random.nextInt(0, UtilClass.allEntity.size()));
            switch (entity) {
                case "üê∫" -> createAlive(Wolf.class);
                case "üêç" -> createAlive(Anaconda.class);
                case "ü¶ä" -> createAlive(Fox.class);
                case "üêª" -> createAlive(Bear.class);
                case "ü¶Ö" -> createAlive(Eagle.class);

                case "üêé" -> createAlive(Horse.class);
                case "ü¶å" -> createAlive(Deer.class);
                case "üêá" -> createAlive(Rabbit.class);
                case "üêÅ" -> createAlive(Mouse.class);
                case "üêê" -> createAlive(Goat.class);
                case "üêë" -> createAlive(Sheep.class);
                case "üêó" -> createAlive(Boar.class);
                case "üêÉ" -> createAlive(Buffalo.class);
                case "ü¶Ü" -> createAlive(Duck.class);
                case "üêõ" -> createAlive(Caterpillar.class);

                case "üå∫" -> createAlive(Plant.class);
            }

            // –†–∞—Å—Ç–µ–Ω–∏—è –±—É–¥—É—Ç –≤—Å–µ–≥–¥–∞, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–Ω–¥–æ–º–∞
            if (i % 2 == 0) {
                createAlive(Plant.class);
            }
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ static –º–µ—Ç–æ–¥ run –¥–µ–ª–∞—è –∏–∑ –Ω–µ–≥–æ –ø–æ—Ç–æ–∫.
     * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã–º–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç–æ–∫–æ–≤ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏–≥—Ä—ã
     */
    public static void startGame(int sec, int threadCount) {
        for (int i = 0; i < threadCount; i++) {
            threadPool.submit(new Zookeeper());
        }

        try {
            Thread.sleep(sec * 1000L);
        } catch (InterruptedException e) {
            System.out.println("–ö–æ–Ω–µ—Ü —Å–≤–µ—Ç–∞ ‚ò£Ô∏èÔ∏è");
        } finally {
            endGame();
        }
    }

    /**
     * –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –∫–æ–≥–¥–∞ –≤—Å–µ —É–º–µ—Ä–ª–∏ –∏–ª–∏ –∏–∑-–∑–∞ –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞
     */
    public static void endGame() {
        threadPool.shutdown();

        try {
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            if (!threadPool.awaitTermination(5, TimeUnit.SECONDS)) {
                threadPool.shutdownNow();
            }
        } catch (InterruptedException e) {
            threadPool.shutdownNow();
        }

        System.out.println("üèÅüèÅüèÅüèÅüèÅüèÅüèÅüèÅüèÅ");
        System.out.println("Game OVER!");
    }

    /**
     * –ü–æ—Ç–æ–∫ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –¥–µ–ª–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
     * –í–æ–∑–º–æ–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–µ–¥–∫–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è—Ö –º–µ—Ä—Ç–≤—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –º–µ—Ç–æ–¥—ã, –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–µ–≥–∫–æ, –Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å
     */
    @Override
    public void run() {
        //TODO: –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏–ª–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
        while (!Thread.currentThread().isInterrupted()) { // –¶–∏–∫–ª, –ø–æ–∫–∞ –ø–æ—Ç–æ–∫ –Ω–µ –ø—Ä–µ—Ä–≤–∞–Ω
            try {
                if (!aliveObjectsList.isEmpty()) {
                    // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                    Entity entity = (Entity) aliveObjectsList.get(random.nextInt(aliveObjectsList.size()));
                    // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                    int action = random.nextInt(1, 4); // 1 - feast, 2 - lovePeriod, 3 - migration

//                    String message = entity + " " + entity.getId() + " –¥–µ–π—Å—Ç–≤–∏–µ " + action;
//                    System.out.println("ü§§ –Ø " + Thread.currentThread().getName() + " —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å —Å " + message);
//                    System.out.println("üîí –Ø " + Thread.currentThread().getName() + " –∑–∞—Ö–≤–∞—Ç–∏–ª " + message);
//                    System.out.println("‚úÖ –Ø " + Thread.currentThread().getName() + " –∑–∞–≤–µ—Ä—à–∏–ª —Å " + message);

                    //TODO: –∫–∞–∂–µ—Ç—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ –∂–∏–≤–æ—Ç–Ω–æ–º—É –ª–∏—à–Ω—è—è, –Ω–æ —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—è —Ç–æ–≥–æ —á—Ç–æ –ø–æ—Ç–æ–∫–∏ –Ω–µ –±—É–¥—É—Ç –¥–µ–ª–∏—Ç—å –æ–¥–Ω–æ –∂–∏–≤–æ—Ç–Ω–æ–µ
                    synchronized (entity.entityLock) {
                        if (entity instanceof Plant && action == 2) {
                            lovePeriod(entity);
                        } else if (entity instanceof AnimalObjects) {
                            switch (action) {
                                case 1 -> feast(entity);
                                case 2 -> lovePeriod(entity);
                                case 3 -> migration(entity);
                            }
                        }
                    }

                }
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                Thread.sleep(UtilClass.getGameTic()); // 100 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt(); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –ø—Ä–µ—Ä–≤–∞–Ω
            }
        }
    }

    //–î–≤–∏–≥–∞–µ—Ç –∂–∏–≤–æ—Ç–Ω–æ–µ
    public static void migration(AliveObjects aliveObject) {
        if (aliveObject instanceof AnimalObjects) {
            ((AnimalObjects) aliveObject).move();
        }
    }

    //–†–∞–∑–º–Ω–æ–∂–∞–µ—Ç –∂–∏–≤–æ—Ç–Ω–æ–µ
    public static void lovePeriod(AliveObjects aliveObject) {
        AliveObjects baby = aliveObject.reproduction();
        if (baby != null) {
            aliveObjectsList.add(baby);
        }
    }

    //–ë–∞–¥–¥–∏, —Ñ–∞—Å!
    public static void feast(AliveObjects aliveObject) {
        if (aliveObject instanceof AnimalObjects && !aliveObject.isDead()) {
            ((AnimalObjects) aliveObject).eat();
        }
    }

    //–£–±–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ
    public static void killEntities(AliveObjects aliveObject) {
        aliveObject.die();
        aliveObjectsList.remove(aliveObject);
        deadEntitiesList.add(aliveObject);

        //–ï—Å–ª–∏ –≤—Å–µ –º–µ—Ä—Ç–≤—ã
        if (aliveObjectsList.isEmpty()) {
            mainThread.interrupt();
        }
    }
}
